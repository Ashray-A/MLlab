import numpy as np

def sig(x):
  return 1 / (1 + np.exp(-x))

def dsig(x):
  return x * (1 - x)

X=np.array([[2,9],[1,5],[3,6]])
Y=np.array([[92],[86],[89]]) / 100.0

weights_h=np.random.randn(2,3)
weights_o=np.random.randn(3,1)

lr=0.01
epochs=5000

for _ in range(epochs):
  h_ip = X @ weights_h
  h_op = sig(h_ip)

  o_ip = h_op @ weights_o
  output = sig(o_ip)

  error = Y - output
  delta_o = error * dsig(output)
  delta_h = delta_o @ weights_o.T * dsig(h_op)

  weights_o += h_op.T @ delta_o * lr
  weights_h += X.T @ delta_h * lr


print("The input: ",X)
print("The predicted output: ",Y)
print("The calculated output: ",output)

test_X = np.array([[2,7],[1,4],[3,8]])
test_Y = np.array([[89],[87],[90]]) / 100.0

test_h_op = sig(test_X @ weights_h)
test_op = sig(test_h_op @ weights_o)

print("Test results")
print(f"Input:\n{test_X}")
print(f"Expected Output:\n{test_Y}")
print(f"Predicted Output:\n{test_op}")